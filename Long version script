1) Create the demo namespace:
	kubectl create ns tectonic-demo

2) Create deployment:

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: hello-world
  namespace: tectonic-demo
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: hello-world
        env: production
        version: v1
    spec:
      containers:
      - name: hello-world
        image: quay.io/jordan_cooks/hello-world-demo
        imagePullPolicy: Always
        ports:
        - name: web
          containerPort: 5000
        - name: metrics
          containerPort: 8000

3) Create service:

kind: Service
apiVersion: v1
metadata:
  name: hello-world
  namespace: tectonic-demo
  labels:
    app: hello-world
  annotations:
    prometheus.io/path: "/"
    prometheus.io/port: "8000"
spec:
  selector:
    app: hello-world
  ports:
  - name: web
    port: 5000
  - name: metrics
    port: 8000
  type: LoadBalancer

4) Create a new Prometheus in the tectonic-demo namespace

apiVersion: monitoring.coreos.com/v1alpha1
kind: Prometheus
metadata:
  name: hello-world
  labels:
    prometheus: hello-world
  namespace: tectonic-demo
spec:
  replicas: 2
  version: v1.7.1
  serviceAccountName: prometheus-helloworld
  serviceMonitorSelector:
    matchLabels:
      app: hello-world
  ruleSelector:
    matchLabels:
      prometheus: hello-world
  resources:
    requests:
      memory: 400Mi
  alerting:
    alertmanagers:
      - namespace: tectonic-system
        name: alertmanager-main
        port: web

5) Create Service Monitor:

apiVersion: monitoring.coreos.com/v1alpha1
kind: ServiceMonitor
metadata:
  labels:
    app: hello-world
  name: hello-world
  namespace: tectonic-demo
spec:
  endpoints:
  - port: metrics
  selector:
    matchLabels:
      app: hello-world

6) Create ServiceAccount:

apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-helloworld
  namespace: tectonic-demo

7) Create CRB:

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus-helloworld
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-k8s
subjects:
- kind: ServiceAccount
  name: prometheus-helloworld
  namespace: tectonic-demo

8) Create ConfigMap:

kind: ConfigMap
apiVersion: v1
metadata:
  name: hello-world
  labels:
    prometheus: hello-world
data:
  alerting.rules: |
    # Alert for any instance that have a median request latency >1s.
    ALERT APIHighRequestLatency
      IF rate(flask_request_latency_seconds_sum[1m]) / rate(flask_request_latency_seconds_count[1m]) > 1 
      FOR 10s
      ANNOTATIONS {
        summary = "High request latency on {{ $labels.instance }}",
        description = "{{ $labels.instance }} has a median request latency above 1s (current value: {{ $value }}s)",
      }

9) Create service for prometheus

apiVersion: v1
kind: Service
metadata:
  name: prometheus-hello-world
  namespace: tectonic-demo
spec:
  type: LoadBalancer
  ports:
  - name: web
    port: 9090
    protocol: TCP
    targetPort: web
  selector:
    prometheus: hello-world

10) Add alerts to AlertManager:

kubectl -n tectonic-system create secret generic alertmanager-main --from-literal=alertmanager.yaml="$(< alertmanager.yaml)" --dry-run -oyaml | kubectl -n tectonic-system replace secret --filename=-
